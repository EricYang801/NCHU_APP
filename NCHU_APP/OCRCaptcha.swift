import Foundation
import CoreGraphics
import CoreImage

struct OCRCaptcha {
    // MARK: - Constants
    private static let TOP_ALIGN = 2
    private static let LEFT_ALIGN = 11
    private static let CODE_W = 13
    private static let CODE_H = 21
    private static let CODE_COUNT = 6
    private static let THRESHOLD = 115
    
    // MARK: - Properties
    private static var captchaImageData: Data?
    
    // MARK: - Public Methods
    static func setCaptchaData(_ data: Data) {
        captchaImageData = data
    }
    
    static func processCaptcha() throws -> String {
        guard let imageData = captchaImageData else {
            throw AppError.captchaProcessFailed
        }
        
        let binaryMatrix = try convertImageToBinaryMatrix(imageData)
        var result = ""
        
        for i in 0..<CODE_COUNT {
            let startX = LEFT_ALIGN + i * CODE_W
            let digitMatrix = extractDigitMatrix(from: binaryMatrix, startX: startX)
            if let digit = recognizeDigit(digitMatrix) {
                result += digit
            }
        }
        
        guard result.count == CODE_COUNT else {
            throw AppError.captchaProcessFailed
        }
        
        return result
    }
    
    // MARK: - Private Helper Methods
    private static func convertImageToBinaryMatrix(_ imageData: Data) throws -> [[Int]] {
        guard let image = CIImage(data: imageData) else {
            throw AppError.captchaProcessFailed
        }
        
        let context = CIContext()
        guard let cgImage = context.createCGImage(image, from: image.extent) else {
            throw AppError.captchaProcessFailed
        }
        
        let width = cgImage.width
        let height = cgImage.height
        let bytesPerRow = width * 4
        let bitsPerComponent = 8
        
        var rawData = [UInt8](repeating: 0, count: height * bytesPerRow)
        let colorSpace = CGColorSpaceCreateDeviceRGB()
        
        guard let context = CGContext(data: &rawData,
                                    width: width,
                                    height: height,
                                    bitsPerComponent: bitsPerComponent,
                                    bytesPerRow: bytesPerRow,
                                    space: colorSpace,
                                    bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue) else {
            throw AppError.captchaProcessFailed
        }
        
        context.draw(cgImage, in: CGRect(x: 0, y: 0, width: width, height: height))
        
        var binaryMatrix = [[Int]](repeating: [Int](repeating: 0, count: width), count: height)
        
        for y in 0..<height {
            for x in 0..<width {
                let offset = (y * bytesPerRow) + (x * 4)
                let r = Int(rawData[offset])
                let g = Int(rawData[offset + 1])
                let b = Int(rawData[offset + 2])
                let gray = (r + g + b) / 3
                binaryMatrix[y][x] = gray < THRESHOLD ? 1 : 0
            }
        }
        
        return binaryMatrix
    }
    
    private static func extractDigitMatrix(from matrix: [[Int]], startX: Int) -> [[Int]] {
        var digitMatrix = [[Int]](repeating: [Int](repeating: 0, count: CODE_W), count: CODE_H)
        
        for y in 0..<CODE_H {
            for x in 0..<CODE_W {
                let sourceY = y + TOP_ALIGN
                let sourceX = x + startX
                if sourceY < matrix.count && sourceX < matrix[0].count {
                    digitMatrix[y][x] = matrix[sourceY][sourceX]
                }
            }
        }
        
        return digitMatrix
    }
    
    private static func recognizeDigit(_ matrix: [[Int]]) -> String? {
        var bestMatch = -1
        var bestScore = Int.max
        
        for (digit, template) in digitTemplates {
            let score = calculateMatchScore(matrix, template)
            if score < bestScore {
                bestScore = score
                bestMatch = Int(digit) ?? -1
            }
        }
        
        return bestMatch >= 0 ? String(bestMatch) : nil
    }
    
    private static func calculateMatchScore(_ matrix: [[Int]], _ template: [[Int]]) -> Int {
        var score = 0
        for y in 0..<CODE_H {
            for x in 0..<CODE_W {
                if matrix[y][x] != template[y][x] {
                    score += 1
                }
            }
        }
        return score
    }
    
    // MARK: - Digit Templates
    static let digitTemplates: [String: [[Int]]] = [
        "0": [
            [0,0,0,0,1,1,1,1,1,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,1,1,1,1,0,0,0,1,1,1,1,0],
            [0,1,1,1,0,0,0,0,0,1,1,1,0],
            [0,1,1,0,0,0,0,0,0,0,1,1,0],
            [1,1,1,0,0,0,0,0,0,0,1,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,0,0,0,0,0,0,0,0,0,1,1],
            [1,1,1,0,0,0,0,0,0,0,1,1,1],
            [0,1,1,0,0,0,0,0,0,0,1,1,0],
            [0,1,1,1,0,0,0,0,0,1,1,1,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "1": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,0,1,1,0,0,0,0],
            [0,0,0,1,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "2": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,0,0,1,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "3": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,0,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "4": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,1,1,1,1,0,0,0],
            [0,0,0,0,0,1,1,0,1,1,0,0,0],
            [0,0,0,0,0,1,1,0,1,1,0,0,0],
            [0,0,0,0,0,1,0,0,1,1,0,0,0],
            [0,0,0,0,1,1,0,0,1,1,0,0,0],
            [0,0,0,0,1,1,0,0,1,1,0,0,0],
            [0,0,0,1,1,0,0,1,1,1,0,0,0],
            [0,0,0,1,1,0,0,1,1,1,0,0,0],
            [0,0,1,1,0,0,0,0,1,1,0,0,0],
            [0,0,1,1,0,0,0,1,1,1,0,0,0],
            [0,1,1,1,0,0,0,1,1,1,0,0,0],
            [0,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "5": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,0,0,1,1,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,0,1,1,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,1,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "6": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "7": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,0,1,1,1,0,0,0,0,0,0,0,0],
            [0,0,1,1,1,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "8": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,1,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,0,0,0],
            [0,0,0,0,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ],
        "9": [
            [0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,0,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,0,1,1,0,0],
            [0,0,1,1,0,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,0,0,0,1,1,1,0,0],
            [0,0,1,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,1,1,1,1,1,1,1,0,0,0],
            [0,0,0,0,0,1,1,1,1,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0],
            [0,0,0,0,0,1,1,1,0,0,0,0,0],
            [0,0,0,0,0,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,0,0,1,1,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0]
        ]
    ]
}

// CGImage擴展
extension CGImage {
    static func load(from path: String) -> CGImage? {
        guard let url = URL(string: path),
              let provider = CGDataProvider(url: url as CFURL) else {
            return nil
        }
        return CGImage(
            width: 100,  // 實際寬度
            height: 30,  // 實際高度
            bitsPerComponent: 8,
            bitsPerPixel: 32,
            bytesPerRow: 400,
            space: CGColorSpaceCreateDeviceRGB(),
            bitmapInfo: CGBitmapInfo(rawValue: CGImageAlphaInfo.premultipliedFirst.rawValue),
            provider: provider,
            decode: nil,
            shouldInterpolate: false,
            intent: .defaultIntent
        )
    }
} 
